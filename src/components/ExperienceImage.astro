---
// src/components/ExperienceImage.astro
import { Image } from "astro:assets";

const {
  filename,
  alt,
  width = 476,
  height = 476,
  class: className,
} = Astro.props;

// Importer dynamiquement toutes les images avec leur métadonnées
// L'option "eager: true" est importante pour que les imports soient disponibles immédiatement
const images = import.meta.glob<{ default: ImageMetadata }>(
  "../assets/images/experiences/*.{png,jpg,jpeg,gif}",
  { eager: true }
);

// Extraire le nom du fichier à partir du chemin complet
function extractFilename(path: any) {
  if (!path) return null;

  // Si c'est juste un nom de fichier sans chemin, le retourner directement
  if (!path.includes("/")) return path;

  // Sinon extraire le nom du fichier depuis le chemin complet
  return path.split("/").pop();
}

// Obtenir le nom du fichier extrait
const targetFilename = extractFilename(filename);

// Chercher l'image correspondante dans les images importées
let imageModule = null;
let debugInfo = [];

if (targetFilename) {
  // Parcourir toutes les images importées pour trouver une correspondance
  for (const path in images) {
    const importedFilename = path.split("/").pop() || "";

    // Ajouter au debug pour comprendre les comparaisons effectuées
    debugInfo.push(`Comparaison: ${importedFilename} ↔ ${targetFilename}`);

    // Vérifier si le nom de fichier (sans l'extension) correspond
    if (importedFilename.includes(targetFilename)) {
      imageModule = images[path];
      break;
    }
  }
}

// Journaliser les informations de débogage (uniquement en développement)
if (import.meta.env.DEV && !imageModule) {
  console.log(
    `Recherche d'image pour "${filename}" (extrait: "${targetFilename}")`
  );
  console.log(`Images disponibles:`, Object.keys(images));
  console.log(`Tentatives de correspondance:`, debugInfo);
}
---

{
  imageModule ? (
    <Image
      src={imageModule.default}
      alt={alt || "Image"}
      width={width}
      height={height}
      format="avif"
      class={className}
    />
  ) : (
    <div
      class="flex items-center justify-center bg-gray-200 dark:bg-gray-700 rounded-lg"
      style={`width: ${width}px; height: ${height}px;`}
    >
      <p class="text-gray-500 dark:text-gray-400 text-center p-4">
        Image non trouvée: {filename}
      </p>
    </div>
  )
}
